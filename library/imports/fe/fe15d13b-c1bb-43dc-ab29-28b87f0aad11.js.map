{"version":3,"sources":["assets\\Scripts\\utils\\httpUtil.js"],"names":["HttpUtil","get","url","params","callback","dataStr","Object","keys","forEach","key","encodeURIComponent","substr","lastIndexOf","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","response","responseText","status","httpStatus","statusText","timeout","TimeOut","send","post","param","JSON","parse","postJson","stringify","json","module","exports"],"mappings":"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","sourceRoot":"/","sourcesContent":["class HttpUtil {\r\n    /**\r\n     * 延迟多久没回复就返回False\r\n     *\r\n     * @type {number}\r\n     * @memberof HttpUtil\r\n     */\r\n    static TimeOut = 200;\r\n\r\n    /**\r\n     * GET请求\r\n     *\r\n     * @static\r\n     * @param {string} url\r\n     * @param {object} [params={}]\r\n     * @param {Function} callback\r\n     * @memberof HttpUtil\r\n     */\r\n    static get(url, params = {}, callback) {\r\n        let dataStr = '';\r\n        Object.keys(params).forEach(key => {\r\n            dataStr += key + '=' + encodeURIComponent(params[key]) + '&';\r\n        })\r\n        if (dataStr !== '') {\r\n            dataStr = dataStr.substr(0, dataStr.lastIndexOf('&'));\r\n            url = url + '?' + dataStr;\r\n        }\r\n\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                let response = xhr.responseText;\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    let httpStatus = xhr.statusText;\r\n                    callback(true, response);\r\n                } else {\r\n                    callback(false, response);\r\n                }\r\n            }\r\n        };\r\n        xhr.timeout = HttpUtil.TimeOut;\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * POST请求\r\n     *\r\n     * @static\r\n     * @param {string} url\r\n     * @param {object} [param={}]\r\n     * @param {Function} callback\r\n     * @memberof HttpUtil\r\n     */\r\n    static post(url, param = {}, callback) {\r\n        var xhr = new XMLHttpRequest();\r\n        let dataStr = '';\r\n        Object.keys(param).forEach(key => dataStr += key + '=' + encodeURIComponent(param[key]) + '&')\r\n        if (dataStr !== '') {\r\n            dataStr = dataStr.substr(0, dataStr.lastIndexOf('&'));\r\n        }\r\n        xhr.open(\"POST\", url, true);\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                let response = xhr.responseText;\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    let httpStatus = xhr.statusText\r\n                    callback(true, JSON.parse(response));\r\n                } else {\r\n                    callback(false, response);\r\n                }\r\n            }\r\n        };\r\n        xhr.send(dataStr);\r\n    }\r\n\r\n    static postJson(url, param = {}, callback) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open('POST', url, true);\r\n        xhr.setRequestHeader(\"Content-type\",\"application/json\");\r\n        xhr.send(JSON.stringify(param));\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState == 4) {\r\n                var json = xhr.responseText;//获取到服务端返回的数据\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    let response = xhr.responseText;\r\n                    callback(true, JSON.parse(response));\r\n                } else {\r\n                    callback(false, response);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// 导出工具类\r\nmodule.exports = HttpUtil;"]}