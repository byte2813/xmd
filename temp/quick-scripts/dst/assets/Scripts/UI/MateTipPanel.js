
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/UI/MateTipPanel.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '5a11blHIqdHvKiejxvT7eu5', 'MateTipPanel');
// Scripts/UI/MateTipPanel.js

"use strict";

var ItemType = require("ItemType");
var MateTipPanel = cc.Class({
  "extends": cc.Component,
  properties: {
    mateItem: cc.Prefab,
    mateParent: cc.Node,
    hasInit: false
  },
  ShowPanel: function ShowPanel() {
    if (this.hasInit == true) {
      this.RefreshPanelItems();
      //cc.log("已经初始化了，返回");
      return;
    }
    var MateList = cc.Mgr.UserDataMgr.getOwnDataListByType(ItemType.Mate);
    var dataList = this.getMateListBySex(cc.Mgr.UserDataMgr.Sex, MateList);
    for (var i = 0; i <= dataList.length - 1; i++) {
      //if() 判断解锁条件  我们会有男女的区别
      var data = dataList[i];
      var obj = cc.instantiate(this.mateItem);
      obj.parent = this.mateParent;
      obj.getComponent("MateItem").init(data);
    }
    this.hasInit = true;
  },
  getMateListBySex: function getMateListBySex(Sex, dataList) {
    var param = [];
    for (var i = 0; i < dataList.length; i++) {
      if (Sex == dataList[i].sex) {
        param.push(dataList[i]);
      }
    }
    return param;
  },
  RefreshPanelItems: function RefreshPanelItems() {
    var children = this.mateParent.children;
    for (var i = children.length - 1; i >= 0; i--) {
      var sc = children[i].getComponent("MateItem");
      if (sc != null) {
        var data = cc.Mgr.UserDataMgr.getDataByItemTypeAndId(ItemType.Mate, sc.Id);
        sc.RefreshLovePoint(data);
        if (data.canDate) {
          sc.ChangeUnLockState(data);
          //children[i].active = true;
        }
      }
    }
  },

  RefreshPanel: function RefreshPanel(Id) {
    var data = cc.Mgr.UserDataMgr.getDataByItemTypeAndId(ItemType.Mate, Id);
    //cc.log("============" + data.LovePoint);
    var children = this.mateParent.children;
    for (var i = children.length - 1; i >= 0; i--) {
      var sc = children[i].getComponent("MateItem");
      if (sc != null) {
        if (sc.Id == Id) {
          if (data.canDate) {
            children[i].active = true;
            sc.RefreshLovePoint(data);
          }
          break;
        }
      }
    }
  },
  ClosePanel: function ClosePanel() {
    cc.Mgr.AudioMgr.playSFX("click");
    this.node.active = false;
  }
});
module.exports = MateTipPanel;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,